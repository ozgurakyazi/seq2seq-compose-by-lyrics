from music21 import *
import glob
import ipdb

def get_data_from_dir(dir):
    all_lyrics = []
    all_notes = []
    for file in glob.glob(f"{dir}/*.mid"):
        lyrics, notes = parse_file(file)
        if not lyrics or not notes:
            ipdb.set_trace()
        else:
            all_lyrics.append(lyrics)
            all_notes.append(notes)
    return all_lyrics, all_notes

def parse_file(file):
    print(f"For file {file} extracted:")
    song = converter.parse(file)
    notes = []
    parts = instrument.partitionByInstrument(song)

    notes_to_parse = song.flat.notes
    for element in notes_to_parse:
        if isinstance(element, note.Note):
            notes.append(str(element.pitch))
        elif isinstance(element, chord.Chord):
            notes.append('.'.join(str(n) for n in element.normalOrder))
    # Extract lyrics
    m = midi.MidiFile()
    m.open(file)
    m.read()
    for track in m.tracks:
        lyrics = [ev.data for ev in track.events if ev.type=="LYRIC"]
        if len(lyrics) > 0:
            break
    print(f"Text: {lyrics}")
    print(f"Notes: {notes}")
    return lyrics, notes

def notes_to_midi(notes_list, output):
    offset = 0
    output_notes = []
    # create note and chord objects based on the values generated by the model
    for pattern in notes_list:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += 0.5
    midi_stream = stream.Stream(output_notes)
    midi_stream.write('midi', fp=f'output/{output}.mid')

def play_midi(midi_file):
    song = converter.parse(midi_file)
    song.show("midi")
